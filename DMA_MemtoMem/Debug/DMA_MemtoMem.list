
DMA_MemtoMem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001c0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000354  0800035c  0001035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000354  08000354  0001035c  2**0
                  CONTENTS
  4 .ARM          00000000  08000354  08000354  0001035c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000354  0800035c  0001035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000354  08000354  00010354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000358  08000358  00010358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800035c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800035c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001035c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000048e  00000000  00000000  0001038c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000159  00000000  00000000  0001081a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00010978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000050  00000000  00000000  000109f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000001fe  00000000  00000000  00010a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000a35  00000000  00000000  00010c3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00005f3d  00000000  00000000  00011673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000175b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000d8  00000000  00000000  00017604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800033c 	.word	0x0800033c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	0800033c 	.word	0x0800033c

080001d4 <DMA_Init>:

#include "DMA.h"
#include "stm32f4xx.h"

void DMA_Init(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	// 1. Enable DMA2 Clock
	DMA2_PCLK_EN();
 80001d8:	4b17      	ldr	r3, [pc, #92]	; (8000238 <DMA_Init+0x64>)
 80001da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001dc:	4a16      	ldr	r2, [pc, #88]	; (8000238 <DMA_Init+0x64>)
 80001de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80001e2:	6313      	str	r3, [r2, #48]	; 0x30
	//DMA2->Stream[0].CR |= (1 << 2) | (1 << 3) | (1 << 4);

	// 3. Set the Data Direction
	   // Read From Memory
	   // Read From Peripheral
	DMA2->Stream[0].CR |= (1 << 7);
 80001e4:	4b15      	ldr	r3, [pc, #84]	; (800023c <DMA_Init+0x68>)
 80001e6:	691b      	ldr	r3, [r3, #16]
 80001e8:	4a14      	ldr	r2, [pc, #80]	; (800023c <DMA_Init+0x68>)
 80001ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80001ee:	6113      	str	r3, [r2, #16]
	DMA2->Stream[0].CR &= ~(1 << 6);
 80001f0:	4b12      	ldr	r3, [pc, #72]	; (800023c <DMA_Init+0x68>)
 80001f2:	691b      	ldr	r3, [r3, #16]
 80001f4:	4a11      	ldr	r2, [pc, #68]	; (800023c <DMA_Init+0x68>)
 80001f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80001fa:	6113      	str	r3, [r2, #16]
	
	// 4. Enable the circular mode (CIRC)
	//DMA2->Stream[0].CR |= (1 << 8);

	// 5. Enable the Memory Increment (MINC)
	DMA2->Stream[0].CR |= (1 << 10);
 80001fc:	4b0f      	ldr	r3, [pc, #60]	; (800023c <DMA_Init+0x68>)
 80001fe:	691b      	ldr	r3, [r3, #16]
 8000200:	4a0e      	ldr	r2, [pc, #56]	; (800023c <DMA_Init+0x68>)
 8000202:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000206:	6113      	str	r3, [r2, #16]
	DMA2->Stream[0].CR |= (1 << 9);
 8000208:	4b0c      	ldr	r3, [pc, #48]	; (800023c <DMA_Init+0x68>)
 800020a:	691b      	ldr	r3, [r3, #16]
 800020c:	4a0b      	ldr	r2, [pc, #44]	; (800023c <DMA_Init+0x68>)
 800020e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000212:	6113      	str	r3, [r2, #16]

	// 6. Set the Memory/Peripheral data size (PSIZE) - 8 bit for Mem/Per
	DMA2->Stream[0].CR &= ~(0xF << 11);
 8000214:	4b09      	ldr	r3, [pc, #36]	; (800023c <DMA_Init+0x68>)
 8000216:	691b      	ldr	r3, [r3, #16]
 8000218:	4a08      	ldr	r2, [pc, #32]	; (800023c <DMA_Init+0x68>)
 800021a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 800021e:	6113      	str	r3, [r2, #16]

	// 8. Set the Priority Level
	DMA2->Stream[0].CR &= ~(0x3 << 16);
 8000220:	4b06      	ldr	r3, [pc, #24]	; (800023c <DMA_Init+0x68>)
 8000222:	691b      	ldr	r3, [r3, #16]
 8000224:	4a05      	ldr	r2, [pc, #20]	; (800023c <DMA_Init+0x68>)
 8000226:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800022a:	6113      	str	r3, [r2, #16]
}
 800022c:	bf00      	nop
 800022e:	46bd      	mov	sp, r7
 8000230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	40023800 	.word	0x40023800
 800023c:	40026400 	.word	0x40026400

08000240 <DMA_Config>:

void DMA_Config (uint32_t srcAdd, uint32_t destAdd, uint16_t datasize)
{
 8000240:	b480      	push	{r7}
 8000242:	b085      	sub	sp, #20
 8000244:	af00      	add	r7, sp, #0
 8000246:	60f8      	str	r0, [r7, #12]
 8000248:	60b9      	str	r1, [r7, #8]
 800024a:	4613      	mov	r3, r2
 800024c:	80fb      	strh	r3, [r7, #6]

	// 1. Set the data size in NDTR Register
	DMA2->Stream[0].NDTR = datasize;
 800024e:	4a0a      	ldr	r2, [pc, #40]	; (8000278 <DMA_Config+0x38>)
 8000250:	88fb      	ldrh	r3, [r7, #6]
 8000252:	6153      	str	r3, [r2, #20]

	// 2. Set the  peripheral address in PAR Register
	DMA2->Stream[0].PAR = srcAdd;
 8000254:	4a08      	ldr	r2, [pc, #32]	; (8000278 <DMA_Config+0x38>)
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	6193      	str	r3, [r2, #24]

	// 3. Set the  Memory address in MAR Register
	DMA2->Stream[0].M0AR = destAdd;
 800025a:	4a07      	ldr	r2, [pc, #28]	; (8000278 <DMA_Config+0x38>)
 800025c:	68bb      	ldr	r3, [r7, #8]
 800025e:	61d3      	str	r3, [r2, #28]

	// 4. Enable the DMA2
	DMA2->Stream[0].CR |= (1 << 0);
 8000260:	4b05      	ldr	r3, [pc, #20]	; (8000278 <DMA_Config+0x38>)
 8000262:	691b      	ldr	r3, [r3, #16]
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <DMA_Config+0x38>)
 8000266:	f043 0301 	orr.w	r3, r3, #1
 800026a:	6113      	str	r3, [r2, #16]
}
 800026c:	bf00      	nop
 800026e:	3714      	adds	r7, #20
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr
 8000278:	40026400 	.word	0x40026400

0800027c <main>:
#include "stm32f4xx.h"
#include "DMA.h"
#include "stm32f4xx_rcc_driver.h"

int main(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
	DMA_Init();
 8000280:	f7ff ffa8 	bl	80001d4 <DMA_Init>

	*(uint32_t *)(0x20016000) = 0xA5A5A5A5;
 8000284:	4b04      	ldr	r3, [pc, #16]	; (8000298 <main+0x1c>)
 8000286:	f04f 32a5 	mov.w	r2, #2779096485	; 0xa5a5a5a5
 800028a:	601a      	str	r2, [r3, #0]

	DMA_Config(0x20016000, 0x20017000, 4);
 800028c:	2204      	movs	r2, #4
 800028e:	4903      	ldr	r1, [pc, #12]	; (800029c <main+0x20>)
 8000290:	4801      	ldr	r0, [pc, #4]	; (8000298 <main+0x1c>)
 8000292:	f7ff ffd5 	bl	8000240 <DMA_Config>

    /* Loop forever */
	for(;;);
 8000296:	e7fe      	b.n	8000296 <main+0x1a>
 8000298:	20016000 	.word	0x20016000
 800029c:	20017000 	.word	0x20017000

080002a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a0:	480d      	ldr	r0, [pc, #52]	; (80002d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002a2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a8:	480c      	ldr	r0, [pc, #48]	; (80002dc <LoopForever+0x6>)
  ldr r1, =_edata
 80002aa:	490d      	ldr	r1, [pc, #52]	; (80002e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002ac:	4a0d      	ldr	r2, [pc, #52]	; (80002e4 <LoopForever+0xe>)
  movs r3, #0
 80002ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b0:	e002      	b.n	80002b8 <LoopCopyDataInit>

080002b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002b6:	3304      	adds	r3, #4

080002b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002bc:	d3f9      	bcc.n	80002b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002be:	4a0a      	ldr	r2, [pc, #40]	; (80002e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c0:	4c0a      	ldr	r4, [pc, #40]	; (80002ec <LoopForever+0x16>)
  movs r3, #0
 80002c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c4:	e001      	b.n	80002ca <LoopFillZerobss>

080002c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c8:	3204      	adds	r2, #4

080002ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002cc:	d3fb      	bcc.n	80002c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ce:	f000 f811 	bl	80002f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002d2:	f7ff ffd3 	bl	800027c <main>

080002d6 <LoopForever>:

LoopForever:
    b LoopForever
 80002d6:	e7fe      	b.n	80002d6 <LoopForever>
  ldr   r0, =_estack
 80002d8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80002dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002e4:	0800035c 	.word	0x0800035c
  ldr r2, =_sbss
 80002e8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002ec:	2000001c 	.word	0x2000001c

080002f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f0:	e7fe      	b.n	80002f0 <ADC_IRQHandler>
	...

080002f4 <__libc_init_array>:
 80002f4:	b570      	push	{r4, r5, r6, lr}
 80002f6:	4d0d      	ldr	r5, [pc, #52]	; (800032c <__libc_init_array+0x38>)
 80002f8:	4c0d      	ldr	r4, [pc, #52]	; (8000330 <__libc_init_array+0x3c>)
 80002fa:	1b64      	subs	r4, r4, r5
 80002fc:	10a4      	asrs	r4, r4, #2
 80002fe:	2600      	movs	r6, #0
 8000300:	42a6      	cmp	r6, r4
 8000302:	d109      	bne.n	8000318 <__libc_init_array+0x24>
 8000304:	4d0b      	ldr	r5, [pc, #44]	; (8000334 <__libc_init_array+0x40>)
 8000306:	4c0c      	ldr	r4, [pc, #48]	; (8000338 <__libc_init_array+0x44>)
 8000308:	f000 f818 	bl	800033c <_init>
 800030c:	1b64      	subs	r4, r4, r5
 800030e:	10a4      	asrs	r4, r4, #2
 8000310:	2600      	movs	r6, #0
 8000312:	42a6      	cmp	r6, r4
 8000314:	d105      	bne.n	8000322 <__libc_init_array+0x2e>
 8000316:	bd70      	pop	{r4, r5, r6, pc}
 8000318:	f855 3b04 	ldr.w	r3, [r5], #4
 800031c:	4798      	blx	r3
 800031e:	3601      	adds	r6, #1
 8000320:	e7ee      	b.n	8000300 <__libc_init_array+0xc>
 8000322:	f855 3b04 	ldr.w	r3, [r5], #4
 8000326:	4798      	blx	r3
 8000328:	3601      	adds	r6, #1
 800032a:	e7f2      	b.n	8000312 <__libc_init_array+0x1e>
 800032c:	08000354 	.word	0x08000354
 8000330:	08000354 	.word	0x08000354
 8000334:	08000354 	.word	0x08000354
 8000338:	08000358 	.word	0x08000358

0800033c <_init>:
 800033c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033e:	bf00      	nop
 8000340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000342:	bc08      	pop	{r3}
 8000344:	469e      	mov	lr, r3
 8000346:	4770      	bx	lr

08000348 <_fini>:
 8000348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034a:	bf00      	nop
 800034c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034e:	bc08      	pop	{r3}
 8000350:	469e      	mov	lr, r3
 8000352:	4770      	bx	lr
